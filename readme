<h1 align="center">üéì <b>Gordon College Campus Cart</b> </h1>

<p align="center">
  <b>An easy-to-use online platform for browsing, ordering, and managing products within the Gordon College campus.</b><br>
  <i>Shop conveniently and efficiently‚Äîwhether you‚Äôre a student or staff!</i>
</p>

<p align="center">
  üåê <b>Live Demo:</b> <a href="https://gccampuscart.online">gccampuscart.online</a>
</p>

---

## ‚ú® <b>Features</b>

- üõí <b>User registration and email verification</b>
- üîç <b>Product browsing, search, and ordering</b>
- üõçÔ∏è <b>Shopping cart with real-time updates</b>
- üí∏ <b>Checkout with GCash or Cash on Pickup</b>
- üì¶ <b>Order tracking and order history</b>
- üõ†Ô∏è <b>Admin dashboard for managing users, products, and orders</b>
- üìß <b>Email notifications for account and order updates</b>

---

## üìÅ <b>Project Structure</b>

```text
api/        # Node.js/Express backend (REST API)
frontend/   # React frontend application
```

---

## üöÄ <b>Getting Started (Development)</b>

### <b>Prerequisites</b>

- <b>Node.js</b> (v14 or higher)
- <b>npm</b>
- <b>MongoDB</b>

### <b>Backend Setup (`api/`)</b>

```sh
cd api
npm install
# Copy .env.example to .env and update the values
npm start
```
_Backend runs on [http://localhost:8080](http://localhost:8080) by default._

### <b>Frontend Setup (`frontend/`)</b>

```sh
cd frontend
npm install
npm start
```
_Frontend runs on [http://localhost:3000](http://localhost:3000)._

---

## üìö <b>API Endpoints</b>

The backend provides a RESTful API for user, product, order, and log management.

### <b>User Routes</b>

- **POST** `/api/users/register` ‚Äî Register a new user
- **POST** `/api/users/login` ‚Äî User login
- **POST** `/api/users/verify-email` ‚Äî Verify user email
- **POST** `/api/users/resend-verification` ‚Äî Resend verification code
- **GET** `/api/users/profile` ‚Äî Get user profile (auth required)
- **PUT** `/api/users/profile` ‚Äî Update user profile (auth required)
- **GET** `/api/users/auth/google` ‚Äî Google OAuth login

### <b>Product Routes</b>

- **GET** `/api/products` ‚Äî List all products
- **GET** `/api/products/:id` ‚Äî Get product details
- **GET** `/api/products/search` ‚Äî Search products
- **POST** `/api/products/createproduct` ‚Äî Create product (admin)
- **PATCH** `/api/products/:id` ‚Äî Update product (admin)
- **DELETE** `/api/products/:id` ‚Äî Archive product (admin)
- **PATCH** `/api/products/restore/:id` ‚Äî Restore product (admin)

### <b>Order Routes</b>

- **GET** `/api/orders` ‚Äî List all orders (admin)
- **POST** `/api/orders` ‚Äî Place an order
- **GET** `/api/orders/:id` ‚Äî Get order details
- **PUT** `/api/orders/:id/payment` ‚Äî Update payment status
- **PUT** `/api/orders/:id/status` ‚Äî Update delivery status
- **GET** `/api/orders/myorders/:id` ‚Äî Get user‚Äôs orders
- **GET** `/api/orders/myorders/:userId/:orderId` ‚Äî Get specific user order

### <b>Logs</b>

- **GET** `/api/logs` ‚Äî Get all logs (admin)

---

## üì¨ <b>Using the API with Postman</b>

You can test all backend endpoints using [Postman](https://www.postman.com/). Below are example requests for each main functionality.

---

### üßë <b>User Endpoints</b>

#### <b>Register a User</b>
- **POST** `https://gccampuscart.online/api/users/register`
- **Body (JSON):**
  ```json
  {
    "firstname": "Juan",
    "middlename": "Santos",
    "lastname": "Dela Cruz",
    "email": "juan@example.com",
    "password": "yourpassword",
    "confirmationpass": "yourpassword"
  }
  ```

#### <b>Verify Email</b>
- **POST** `https://gccampuscart.online/api/users/verify-email`
- **Body (JSON):**
  ```json
  {
    "email": "juan@example.com",
    "verificationCode": "123456"
  }
  ```

#### <b>Resend Verification Code</b>
- **POST** `https://gccampuscart.online/api/users/resend-verification`
- **Body (JSON):**
  ```json
  {
    "email": "juan@example.com"
  }
  ```

#### <b>Login</b>
- **POST** `https://gccampuscart.online/api/users/login`
- **Body (JSON):**
  ```json
  {
    "email": "juan@example.com",
    "password": "yourpassword"
  }
  ```

#### <b>Get User Profile</b>
- **GET** `https://gccampuscart.online/api/users/profile`
- **Headers:**  
  `Authorization: Bearer <your_token>`

#### <b>Update User Profile</b>
- **PUT** `https://gccampuscart.online/api/users/profile`
- **Headers:**  
  `Authorization: Bearer <your_token>`
- **Body (JSON):**
  ```json
  {
    "firstname": "Juan",
    "middlename": "Santos",
    "lastname": "Dela Cruz",
    "email": "juan@example.com",
    "password": "newpassword",
    "oldPassword": "yourpassword",
    "address": {
      "street": "123 Main St",
      "city": "Olongapo",
      "postalCode": "2200",
      "country": "Philippines"
    }
  }
  ```

#### <b>Google OAuth Login</b>
- **GET** `https://gccampuscart.online/api/users/auth/google`
- _Follow the OAuth flow in your browser._

---

### üì¶ <b>Product Endpoints</b>

#### <b>List All Products</b>
- **GET** `https://gccampuscart.online/api/products`

#### <b>Get Product Details</b>
- **GET** `https://gccampuscart.online/api/products/<product_id>`

#### <b>Search Products</b>
- **GET** `https://gccampuscart.online/api/products/search?keyword=shirt`

#### <b>Create Product (Admin)</b>
- **POST** `https://gccampuscart.online/api/products/createproduct`
- **Headers:**  
  `Authorization: Bearer <admin_token>`
- **Body:**  
  Form-data (for images and fields, see API docs)

#### <b>Update Product (Admin)</b>
- **PATCH** `https://gccampuscart.online/api/products/<product_id>`
- **Headers:**  
  `Authorization: Bearer <admin_token>`
- **Body:**  
  Form-data (for images and fields, see API docs)

#### <b>Archive Product (Admin)</b>
- **DELETE** `https://gccampuscart.online/api/products/<product_id>`
- **Headers:**  
  `Authorization: Bearer <admin_token>`
- **Body (JSON):**
  ```json
  {
    "reason": "Outdated product",
    "userId": "<admin_user_id>",
    "userInfo": "{\"data\":{\"name\":\"Admin Name\",\"email\":\"admin@example.com\"}}"
  }
  ```

#### <b>Restore Product (Admin)</b>
- **PATCH** `https://gccampuscart.online/api/products/restore/<product_id>`
- **Headers:**  
  `Authorization: Bearer <admin_token>`
- **Body (JSON):**
  ```json
  {
    "reason": "Restocking",
    "userId": "<admin_user_id>",
    "userInfo": "{\"data\":{\"name\":\"Admin Name\",\"email\":\"admin@example.com\"}}"
  }
  ```

---

### üõí <b>Order Endpoints</b>

#### <b>List All Orders (Admin)</b>
- **GET** `https://gccampuscart.online/api/orders`
- **Headers:**  
  `Authorization: Bearer <admin_token>`

#### <b>Place an Order</b>
- **POST** `https://gccampuscart.online/api/orders`
- **Headers:**  
  `Authorization: Bearer <your_token>`
- **Body (JSON):**
  ```json
  {
    "orderItems": [
      {
        "product": "<product_id>",
        "qty": 1
      }
    ],
    "shippingAddress": {
      "address": "123 Main St",
      "city": "Olongapo",
      "postalCode": "2200",
      "country": "Philippines"
    },
    "paymentMethod": "gcash",
    "totalPrice": 500,
    "user": "<your_user_id>"
  }
  ```

#### <b>Get Order Details</b>
- **GET** `https://gccampuscart.online/api/orders/<order_id>`
- **Headers:**  
  `Authorization: Bearer <your_token>`

#### <b>Update Payment Status (Admin)</b>
- **PUT** `https://gccampuscart.online/api/orders/<order_id>/payment`
- **Headers:**  
  `Authorization: Bearer <admin_token>`
- **Body (JSON):**
  ```json
  {
    "isPaid": true
  }
  ```

#### <b>Update Delivery Status (Admin)</b>
- **PUT** `https://gccampuscart.online/api/orders/<order_id>/status`
- **Headers:**  
  `Authorization: Bearer <admin_token>`
- **Body (JSON):**
  ```json
  {
    "isDelivered": true,
    "userInfo": "{\"data\":{\"name\":\"Admin Name\",\"email\":\"admin@example.com\"}}"
  }
  ```

#### <b>Get User‚Äôs Orders</b>
- **GET** `https://gccampuscart.online/api/orders/myorders/<user_id>`
- **Headers:**  
  `Authorization: Bearer <your_token>`

#### <b>Get Specific User Order</b>
- **GET** `https://gccampuscart.online/api/orders/myorders/<user_id>/<order_id>`
- **Headers:**  
  `Authorization: Bearer <your_token>`

---

### üìù <b>Logs (Admin)</b>

#### <b>Get All Logs</b>
- **GET** `https://gccampuscart.online/api/logs`
- **Headers:**  
  `Authorization: Bearer <admin_token>`

---

> Replace `<your_token>`, `<admin_token>`, `<product_id>`, `<order_id>`, and `<user_id>` with actual values from your login and queries.

---

## üåç <b>Deployment</b>

The application is deployed on a custom Linux server. The domain was purchased from Hostinger and DNS is managed via Cloudflare.

### <b>Deployment Steps</b>

1. **Provision a Linux Server**
   - Set up a Linux server (e.g., Ubuntu) with SSH access.
   - Install Node.js, npm, and MongoDB.

2. **Clone the Repository**
   ```sh
   git clone <your-repo-url>
   cd <project-folder>
   ```

3. **Configure Environment Variables**
   - Set up `.env` files for both `api/` and `frontend/` with production values.

4. **Install Dependencies**
   ```sh
   cd api && npm install
   cd ../frontend && npm install
   ```

5. **Build the Frontend**
   ```sh
   npm run build
   ```
   - The production build will be in `frontend/build`.

6. **Serve the Frontend**
   - Use a web server like Nginx or Apache to serve the static files from `frontend/build`.

7. **Run the Backend**
   - Use a process manager like PM2 to keep the Node.js backend running:
     ```sh
     pm2 start server.js --name campus-cart-api
     ```

8. **Domain and SSL**
   - Purchase your domain from Hostinger.
   - Point your domain‚Äôs DNS to Cloudflare.
   - Set up DNS records in Cloudflare to point to your server‚Äôs IP.
   - Use Cloudflare‚Äôs SSL/TLS features for HTTPS.

9. **(Optional) Set Up Reverse Proxy**
   - Configure Nginx or Apache as a reverse proxy to forward API requests to the backend and serve the frontend.

---

## üìù <b>Usage</b>

- Visit [gccampuscart.online](https://gccampuscart.online)
- Register or log in to your account
- Browse products, add items to your cart, and proceed to checkout
- Track your orders and receive notifications

---

## üìÑ <b>License</b>

This project is licensed under the MIT License.

---

<p align="center"><i>Developed for Gordon College campus use.</i></p>